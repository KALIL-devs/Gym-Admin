// src/pages/Dashboard.jsx

import React, { useState, useEffect } from "react";
import { useNavigate } from 'react-router-dom';

// Import the new pages/components
import ClientManagementPage from "./ClientManagementPage"; 
import MembershipRenewalPage from "./MembershipRenewalPage";
import RenewalHistoryLog from "./RenewalHistoryPage"; 
import MembershipDashboard from "../components/MembershipDashboard"; 

// Import the necessary modal/component overlays
import MessageBox from "../components/MessageBox";

import { useTheme } from "../context/ThemeContext";

import {
Â  RiCloseFill,
Â  RiSunLine,
Â  RiMoonLine,
Â  RiDashboardLine,
Â  RiUserLine,
Â  RiLogoutCircleRLine,
Â  RiNotification2Line,
} from "react-icons/ri";
import { FaMoneyBillWave } from "react-icons/fa"; 
import { HiOutlineDocumentText } from "react-icons/hi"; 

// --- Component Start ---

function Dashboard({ user, setLoggedInUser }) {
Â  const { isDarkMode, toggleTheme } = useTheme();

Â  const [clients, setClients] = useState([]);
Â  const [lastRollNo, setLastRollNo] = useState(0);
Â  const [searchTerm, setSearchTerm] = useState("");
Â  const [filterStatus, setFilterStatus] = useState("");
Â  Â  
Â  // State to track the client whose details modal should be open
Â  const [selectedClient, setSelectedClient] = useState(null);

Â  // âœ… Default page set to 'membership-status' instead of null
Â  const [activeModal, setActiveModal] = useState('membership-status'); 

Â  const [messageBox, setMessageBox] = useState({
Â  Â  isVisible: false,
Â  Â  message: "",
Â  Â  type: "info",
Â  Â  onConfirm: null,
Â  });
Â  
Â  // Track the count of clients needing attention for the sidebar badge
Â  const [attentionCount, setAttentionCount] = useState(0);

Â  const navigate = useNavigate();

Â  const handleLogout = () => {
Â  Â  setLoggedInUser(null);
Â  Â  navigate('/');
Â  };
Â  Â  
Â  // --- Helper for calculating attention count ---
Â  const isClientNeedingAttention = (client) => {
Â  Â  if (!client.endDate) return false; 
Â  Â  const endDate = new Date(client.endDate); 
Â  Â  const today = new Date();
Â  Â  const end = new Date(endDate.getFullYear(), endDate.getMonth(), endDate.getDate());
Â  Â  const now = new Date(today.getFullYear(), today.getMonth(), today.getDate());
Â  Â  const daysDifference = (end.getTime() - now.getTime()) / (1000 * 60 * 60 * 24);

Â  Â  return daysDifference <= 30 || (daysDifference < 0 && daysDifference >= -31);
Â  }

Â  const fetchClients = async () => {
Â  Â  try {
Â  Â  Â  const response = await fetch("http://localhost:5000/admin/clients");
Â  Â  Â  if (response.ok) {
Â  Â  Â  Â  const data = await response.json();
Â  Â  Â  Â  const validClients = data.filter(c => c && c.uid); 
Â  Â  Â  Â  
Â  Â  Â  Â  setClients(validClients);

Â  Â  Â  Â  const clientsNeedingAttention = validClients.filter(isClientNeedingAttention);
Â  Â  Â  Â  setAttentionCount(clientsNeedingAttention.length);

Â  Â  Â  Â  if (validClients.length > 0) {
Â  Â  Â  Â  Â  const latest = Math.max(...validClients.map((c) => c.rollno || 0));
Â  Â  Â  Â  Â  setLastRollNo(latest);
Â  Â  Â  Â  }
Â  Â  Â  } else {
Â  Â  Â  Â  console.error("Failed to fetch clients");
Â  Â  Â  }
Â  Â  } catch (error) {
Â  Â  Â  console.error("Error fetching clients:", error);
Â  Â  }
Â  };

Â  useEffect(() => {
Â  Â  if (user) fetchClients();
Â  }, [user]);

Â  const handleAddUserSuccess = (newUserData) => {
Â  Â  setClients((prev) => [...prev, newUserData]);
Â  Â  setLastRollNo(newUserData.rollno);
Â  Â  
Â  Â  setMessageBox({
Â  Â  Â  isVisible: true,
Â  Â  Â  message: "âœ… User created successfully!",
Â  Â  Â  type: "success",
Â  Â  });
Â  Â  fetchClients();
Â  };

Â  const handleClientUpdate = (updatedClient) => {
Â  Â  console.log("Client update triggered, refetching clients...");
Â  Â  setSelectedClient(null); 
Â  Â  fetchClients();
Â  };

Â  const handleClientDelete = (uid) => {
Â  Â  setClients((prev) => prev.filter((c) => c?.uid !== uid)); 
Â  Â  setSelectedClient(null);
Â  Â  fetchClients();
Â  };

Â  const handleClientClick = (client) => {
Â  Â  setSelectedClient(client);
Â  };

Â  const handleCloseClientModal = () => {
Â  Â  setSelectedClient(null);
Â  };

Â  // --- UPDATED FILTERING LOGIC ---
Â  const filteredClients = (Array.isArray(clients) ? clients : [])
Â  Â  .filter((c) => {
Â  Â  Â  if (!c || !c.name || !c.rollno || !c.endDate) return false; 
Â  Â  Â  
      const lowerCaseSearchTerm = searchTerm.toLowerCase();

      // ðŸŽ¯ FIX: Check if search term matches Name OR Roll No.
Â  Â  Â  const isNameMatch = c.name.toLowerCase().includes(lowerCaseSearchTerm);
      const isRollNoMatch = String(c.rollno).toLowerCase().includes(lowerCaseSearchTerm);
      
      const isSearchMatch = isNameMatch || isRollNoMatch; // The key change!
      
      if (!isSearchMatch) return false;
Â  Â  Â  
Â  Â  Â  // Existing status filtering logic remains
Â  Â  Â  const endDate = new Date(c.endDate); 
Â  Â  Â  const today = new Date();
      // Calculate days difference by comparing date objects
Â  Â  Â  const daysDifference = (endDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24);

Â  Â  Â  if (filterStatus === "active") {
Â  Â  Â  Â  return daysDifference >= 0;
Â  Â  Â  }
Â  Â  Â  if (filterStatus === "expired") {
Â  Â  Â  Â  return daysDifference < 0;
Â  Â  Â  }
Â  Â  Â  
Â  Â  Â  return true;
Â  Â  })
Â  Â  .sort((a, b) => (a.rollno || 0) - (b.rollno || 0));
// -----------------------------------


Â  return (
Â  Â  <div className="flex min-h-screen bg-dark-bg text-dark-text dark:bg-light-bg dark:text-light-text">
Â  Â  Â  {/* Sidebar */}
Â  Â  Â  <aside className="fixed top-0 left-0 z-50 h-screen w-64 hidden sm:flex flex-col bg-dark-card dark:bg-light-card shadow-xl">
Â  Â  Â  Â  <div className="p-6 font-bold text-2xl text-dark-accent dark:text-light-accent">
Â  Â  Â  Â  Â  GYM ADMIN
Â  Â  Â  Â  </div>
Â  Â  Â  Â  <nav className="flex-1 px-4 space-y-3 overflow-y-auto">
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  {/* 1. MEMBERSHIP STATUS */}
Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  className={`flex items-center gap-3 w-full p-3 rounded-lg hover:bg-dark-accent hover:text-white dark:hover:bg-light-accent ${activeModal === 'membership-status' ? 'bg-dark-accent text-white dark:bg-light-accent' : ''}`}
Â  Â  Â  Â  Â  Â  onClick={() => setActiveModal('membership-status')} 
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <RiNotification2Line /> Membership 
Â  Â  Â  Â  Â  </button>

Â  Â  Â  Â  Â  {/* 2. CLIENTS */}
Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  className={`flex items-center gap-3 w-full p-3 rounded-lg hover:bg-dark-accent hover:text-white dark:hover:bg-light-accent ${activeModal === null ? 'bg-dark-accent text-white dark:bg-light-accent' : ''}`}
Â  Â  Â  Â  Â  Â  onClick={() => setActiveModal(null)} 
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <RiDashboardLine /> Clients
Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  {/* 3. RENEW MEMBERSHIP */}
Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  className={`flex items-center gap-3 w-full p-3 rounded-lg hover:bg-dark-accent hover:text-white dark:hover:bg-light-accent ${activeModal === 'renew-membership' ? 'bg-dark-accent text-white dark:bg-light-accent' : ''}`}
Â  Â  Â  Â  Â  Â  onClick={() => setActiveModal('renew-membership')}
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <FaMoneyBillWave /> Renew Membership
Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  {/* 4. RENEWAL HISTORY */}
Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  className={`flex items-center gap-3 w-full p-3 rounded-lg hover:bg-dark-accent hover:text-white dark:hover:bg-light-accent ${activeModal === 'renewal-log' ? 'bg-dark-accent text-white dark:bg-light-accent' : ''}`}
Â  Â  Â  Â  Â  Â  onClick={() => setActiveModal('renewal-log')} 
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <HiOutlineDocumentText /> Renewal History
Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  
Â  Â  Â  Â  </nav>
Â  Â  Â  Â  <div className="p-4 border-t border-gray-700 dark:border-gray-300">
Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  onClick={handleLogout}
Â  Â  Â  Â  Â  Â  className="flex items-center gap-3 w-full p-3 rounded-lg bg-slate-700 text-white hover:bg-slate-600 transition-colors"
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <RiLogoutCircleRLine /> Logout
Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  </div>
Â  Â  Â  </aside>

Â  Â  Â  {/* Main Content */}
Â  Â  Â  <main className="flex-1 flex flex-col sm:pl-64">
Â  Â  Â  Â  {/* Topbar */}
Â  Â  Â  Â  <header className="flex justify-between items-center px-6 py-4 shadow-md bg-dark-card dark:bg-light-card">
Â  Â  Â  Â  Â  <h1 className="text-xl font-semibold text-dark-accent dark:text-light-accent">
Â  Â  Â  Â  Â  Â  {activeModal === 'renew-membership' 
Â  Â  Â  Â  Â  Â  Â  Â  ? 'Membership Renewal' 
Â  Â  Â  Â  Â  Â  Â  Â  : activeModal === 'renewal-log'
Â  Â  Â  Â  Â  Â  Â  Â  ? 'Renewal History'
Â  Â  Â  Â  Â  Â  Â  Â  : activeModal === 'membership-status' 
Â  Â  Â  Â  Â  Â  Â  Â  ? 'Membership Status Dashboard'
Â  Â  Â  Â  Â  Â  Â  Â  : 'Client Management Dashboard'}
Â  Â  Â  Â  Â  </h1>
Â  Â  Â  Â  Â  <div className="flex items-center gap-4">
Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  onClick={toggleTheme}
Â  Â  Â  Â  Â  Â  Â  className="p-2 rounded-full hover:bg-dark-accent hover:text-white dark:hover:bg-light-accent"
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  {isDarkMode ? (
Â  Â  Â  Â  Â  Â  Â  Â  <RiMoonLine className="h-5 w-5" />
Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  <RiSunLine className="h-5 w-5" />
Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </header>

Â  Â  Â  Â  {/* CONDITIONAL PAGE RENDERING */}
Â  Â  Â  Â  {activeModal === null && (
Â  Â  Â  Â  Â  <ClientManagementPage
Â  Â  Â  Â  Â  Â  clients={clients}
Â  Â  Â  Â  Â  Â  filteredClients={filteredClients}
Â  Â  Â  Â  Â  Â  onFilter={setFilterStatus}
Â  Â  Â  Â  Â  Â  searchTerm={searchTerm}
Â  Â  Â  Â  Â  Â  onSearchChange={setSearchTerm}
Â  Â  Â  Â  Â  Â  lastRollNo={lastRollNo}
Â  Â  Â  Â  Â  Â  onAddSuccess={handleAddUserSuccess}
Â  Â  Â  Â  Â  Â  setMessageBox={setMessageBox}
Â  Â  Â  Â  Â  Â  selectedClient={selectedClient}
Â  Â  Â  Â  Â  Â  onClientClick={handleClientClick}
Â  Â  Â  Â  Â  Â  onCloseClientModal={handleCloseClientModal}
Â  Â  Â  Â  Â  Â  onUpdateClient={handleClientUpdate}
Â  Â  Â  Â  Â  Â  onDeleteClient={handleClientDelete}
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  )}
Â  Â  Â  Â  
Â  Â  Â  Â  {activeModal === 'renew-membership' && (
Â  Â  Â  Â  Â  Â  <MembershipRenewalPage
Â  Â  Â  Â  Â  Â  Â  Â  clients={clients}
Â  Â  Â  Â  Â  Â  Â  Â  setMessageBox={setMessageBox}
Â  Â  Â  Â  Â  Â  Â  Â  onClientUpdate={handleClientUpdate}
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  )}
Â  Â  Â  Â  
Â  Â  Â  Â  {activeModal === 'renewal-log' && (
Â  Â  Â  Â  Â  Â  <div className="flex-1 overflow-auto">
Â  Â  Â  Â  Â  Â  Â  Â  <RenewalHistoryLog />
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  )}
Â  Â  Â  Â  
Â  Â  Â  Â  {activeModal === 'membership-status' && (
Â  Â  Â  Â  Â  Â  <MembershipDashboard clients={clients} /> 
Â  Â  Â  Â  )}

Â  Â  Â  </main>

Â  Â  Â  {/* Modals */}
Â  Â  Â  {messageBox.isVisible && (
Â  Â  Â  Â  <MessageBox
Â  Â  Â  Â  Â  message={messageBox.message}
Â  Â  Â  Â  Â  type={messageBox.type}
Â  Â  Â  Â  Â  onClose={() => setMessageBox({ isVisible: false, message: "" })}
Â  Â  Â  Â  Â  onConfirm={messageBox.onConfirm}
Â  Â  Â  Â  />
Â  Â  Â  )}
Â  Â  </div>
Â  );
}

export default Dashboard;